/*
 * Copyright 2020 The gradle-taskinfo contributors
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations under the License.
 */

plugins {
    id 'java-gradle-plugin'
    id 'idea'
    id 'checkstyle'
    id 'com.gradle.plugin-publish' version '0.20.0'
    id 'org.ajoberstar.grgit' version '4.1.1'
    id 'org.barfuin.gradle.jacocolog' version '2.0.0'
    id 'org.barfuin.gradle.taskinfo' version '1.3.1'
}

repositories {
    mavenCentral()
}


/*
 * - - - -  PLUGIN METADATA  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 */
group = 'org.barfuin.gradle.taskinfo'
description = 'Gradle plugin that displays task dependencies and types'

ext {
    buildTimestamp = new Date()
    website = 'https://gitlab.com/barfuin/gradle-taskinfo'
    grgit.open(currentDir: project.rootDir).withCloseable { gitRepo ->
        gitVersion = grgit.describe {
            tags = true
            match = ['v*']
            always = true
        }
        gitHash = gitRepo.head().id
        gitCleanBuild = gitRepo.status().isClean()
        if (gitVersion.startsWith('v')) {
            gitVersion = gitVersion.substring(1)
        }
        if (!gitCleanBuild) {
            gitVersion += '-dirty'
        }
    }
}
version = project.ext.gitVersion

project.gradle.taskGraph.whenReady { taskGraph ->
    if (taskGraph.hasTask(':classes')) {
        logger.lifecycle("\nBuilding ${project.name} ${project.version}")
    }
}

gradlePlugin {
    plugins {
        taskinfo {
            id = 'org.barfuin.gradle.taskinfo'
            implementationClass = 'org.barfuin.gradle.taskinfo.GradleTaskInfoPlugin'
            displayName = 'gradle-taskinfo'
            description = 'Displays task dependencies and types'
        }
    }
}


/*
 * - - - -  DEPENDENCIES  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 */
configurations {
    jacocoRuntime
}

dependencies {
    api group: 'org.barfuin.texttree', name: 'text-tree', version: '0.9.1' 
 // AC-changes   
//  implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.12.0'
//  implementation group: 'org.fusesource.jansi', name: 'jansi', version: '1.17.1'
	
	
//  implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.12.6.1'
//  implementation group: 'org.springframework', name: 'spring-beans', version: '5.1.5.RELEASE' // fixed version '5.3.20.RELEASE' vulnarable '5.1.5.RELEASE'
	
    testImplementation group: 'junit', name: 'junit', version: '3.2.0'
    testImplementation group: 'org.mockito', name: 'mockito-core', version: '3.11.2'

    jacocoRuntime "org.jacoco:org.jacoco.agent:${jacoco.toolVersion}:runtime"
}


/*
 * - - - -  COMPILATION  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 */
java {
    sourceCompatibility = JavaVersion.VERSION_1_8
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    options.compilerArgs << '-Xlint:unchecked' << '-Xlint:deprecation' << '-proc:none'
}


/*
 * - - - -  INTELLIJ CONFIG  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 */
idea.module {
    downloadSources = true
    downloadJavadoc = true
    excludeDirs += file('.idea')
    excludeDirs += file('_support')
}
idea.project {
    jdkName = JavaVersion.VERSION_1_8
    languageLevel = JavaVersion.VERSION_1_8
}


/*
 * - - - -  TESTS  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 */
sourceSets {
    testUtil
    functionalTest
}

gradlePlugin.testSourceSets(sourceSets.testUtil, sourceSets.functionalTest)

dependencies {
    testUtilImplementation group: 'junit', name: 'junit', version: '4.13.2'
    testUtilImplementation group: 'commons-io', name: 'commons-io', version: '2.10.0'

    testImplementation sourceSets.testUtil.output

    functionalTestImplementation group: 'junit', name: 'junit', version: '4.13.2'
    functionalTestImplementation group: 'commons-io', name: 'commons-io', version: '2.10.0'
    functionalTestImplementation group: 'org.tools4j', name: 'tools4j-spockito', version: '1.6'
    functionalTestImplementation sourceSets.testUtil.output
}

tasks.register('testprops').configure {
    group = LifecycleBasePlugin.VERIFICATION_GROUP
    description = 'Copy relevant Gradle properties for use by the functional test run.'
    final File outFile = new File(temporaryDir, "gradle.properties")
    outputs.file(outFile)
    doLast {
        final Properties props = new Properties()
        ['http.proxyHost',  'http.proxyPort',  'http.nonProxyHosts',
         'https.proxyHost', 'https.proxyPort', 'https.nonProxyHosts'].each { String sysPropName ->
            final String value = System.getProperty(sysPropName);
            if (value != null) {
                props.setProperty("systemProp.${sysPropName}", value)
            }
        }
        final String jacocoPath = configurations.jacocoRuntime.asPath.replace('\\', '/')
        final String jacocoDir = "${buildDir}/jacoco".replace('\\', '/')
        props.setProperty('org.gradle.jvmargs', "-javaagent:${jacocoPath}=destfile=${jacocoDir}/testkit.exec")
        props.store(outFile.newWriter(), 'Properties for functional tests')
    }
}

tasks.register('functionalTest', Test).configure {
    dependsOn(tasks.testprops)
    group = LifecycleBasePlugin.VERIFICATION_GROUP
    description = 'Run the functional tests.'
    testClassesDirs = sourceSets.functionalTest.output.classesDirs
    classpath = sourceSets.functionalTest.runtimeClasspath
    testLogging {
        events = ['failed']
        showStackTraces = true
        showExceptions = true
        showCauses = true
        exceptionFormat = 'full'
        if (logger.isInfoEnabled()) {
            showStandardStreams = true
        }
    }
}


tasks.named('jacocoTestReport').configure {
    executionData fileTree("${buildDir}/jacoco")
    dependsOn(tasks.test, tasks.functionalTest)
}

tasks.named('check').configure {
    dependsOn tasks.jacocoTestReport
}


/*
 * - - - -  CHECKSTYLE  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 */
checkstyle {
    configProperties 'workspace_loc': project.projectDir
 // AC-change- low severity
 //ATTN  Gal Doron - to reproduce issie change version to 8.25. it creates isseu but not suggest autoremediation - was 8.38
    toolVersion = '8.25' // AC-change checkstile version  found in 8.25    fixed 8.29 and  8.38
    showViolations = true
    ignoreFailures = false
}

dependencies {
    checkstyle "com.puppycrawl.tools:checkstyle:${project.extensions.checkstyle.toolVersion}"
    // AC-change-no remedy
    //  checkstyle group: 'com.thomasjensen.checkstyle.addons', name: 'checkstyle-addons-java8b', version: '7.0.1' 
        checkstyle group: 'com.github.sevntu-checkstyle', name: 'sevntu-checks', version: '1.44.1'
}

tasks.register('checkstyle').configure {
    description = 'Runs all Checkstyle tasks'
    group = LifecycleBasePlugin.VERIFICATION_GROUP
    dependsOn tasks.withType(Checkstyle)
}

project.extensions.checkstyle.sourceSets.each { SourceSet s ->
    tasks.named(s.getTaskName('checkstyle', null)).configure { Checkstyle task ->
        task.setGroup(LifecycleBasePlugin.VERIFICATION_GROUP)
        task.setSource(s.allSource)
        getLogger().info("Reconfigured task \'${task.name}\' to include *all* files in sourceSet \'${s.name}\'")
    }
}


/*
 * - - - -  JAVADOC  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 */
tasks.named('javadoc').configure {
    title = project.name + " v${project.version}"
    options.encoding = 'UTF-8'
    options.docEncoding = 'UTF-8'
    options.charSet = 'UTF-8'
    options.windowTitle = project.name
    options.noDeprecated = true
    options.header = project.name + " v${project.version}"
    options.links('https://checkstyle-addons.github.io/jsr305-javadoc/3.0.1/',
        'https://docs.oracle.com/javase/8/docs/api/',
        'https://docs.gradle.org/7.4.1/javadoc/')

    // javadoc does not inherit the proxy settings (https://issues.gradle.org/browse/GRADLE-1228)
    if (System.properties['http.proxyHost'] != null) {
        options.jFlags('-DproxyHost=' + System.properties['http.proxyHost'],
            '-DproxyPort=' + System.properties['http.proxyPort'],
            '-DproxyUser=' + System.properties['http.proxyUser'],
            '-DproxyPassword=' + System.properties['http.proxyPassword'])
    }
}


/*
 * - - - -  ARTIFACTS  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 */
tasks.named('jar').configure {
    into('META-INF') {
        from 'LICENSE'
    }
    manifest {
        attributes (
            'Specification-Title'         : project.name,
            'Specification-Vendor-Id'     : 'org.barfuin',
            'Specification-Version'       : project.version,
            'Implementation-Title'        : project.name,
            'Implementation-Vendor-Id'    : 'org.barfuin',
            'Implementation-Version'      : project.version,
            'Implementation-SCM-Revision' : project.ext.gitHash,
            'Website'                     : project.ext.website,
            'Created-By'                  : "Gradle ${gradle.gradleVersion}",
            'Build-Jdk'           : System.getProperty('java.vendor') + ' ' + System.getProperty('java.version'),
            'Build-Clean'                 : project.ext.gitCleanBuild
        )
    }
    doFirst {
        // add build timestamp in execution phase so that it does not count for the up-to-date check
        manifest {
            attributes 'Build-Timestamp' : project.ext.buildTimestamp.toString()
        }
    }
}

tasks.withType(Jar).matching({ t -> t.name == 'publishPluginJavaDocsJar' || t.name == 'publishPluginJar'}).configureEach
{
    into('META-INF') {
        from 'LICENSE'
    }
    manifest = tasks.jar.manifest
    doFirst {
        manifest {
            attributes 'Build-Timestamp': project.ext.buildTimestamp.toString()
        }
    }
}


/*
 * - - - -  PUBLISHING  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 */
pluginBundle {
    website = project.ext.website
    vcsUrl = project.ext.website
    tags = ['dependencies', 'execution-queue', 'task-dependencies', 'tasks', 'task-tree']
}

tasks.named('publishPlugins').configure {
    doFirst {
        if (!(project.version ==~ /\d+\.\d+\.\d+/)) {
            throw new GradleException("Unsupported version for publishing: ${project.version}")
        }
    }
}
